var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
exports.buffer_to_base64=(function(buffer){
	var base64 = "";
	var chr1, chr2, chr3 = "";
	var enc1, enc2, enc3, enc4 = "";
	var i = 0;
	do {
		chr1 = buffer[i++];
		chr2 = buffer[i++];
		chr3 = buffer[i++];
		enc1 = chr1 >> 2;
		enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
		enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
		enc4 = chr3 & 63;
		if (isNaN(chr2)) {
			enc3 = enc4 = 64;
		} else if (isNaN(chr3)) {
			enc4 = 64;
		}
		base64 = base64 + 
		keyStr.charAt(enc1) + 
		keyStr.charAt(enc2) + 
		keyStr.charAt(enc3) + 
		keyStr.charAt(enc4);
		chr1 = chr2 = chr3 = "";
		enc1 = enc2 = enc3 = enc4 = "";
	} while (i < buffer.length);
	return base64;
});
exports.base64_to_buffer=(function(base64){
	var array = new Array();
	var chr1, chr2, chr3 = "";
	var enc1, enc2, enc3, enc4 = "";
	var i = 0;
	try{
		if(base64.length%4!=0){
			return "";
		}
	}catch(e){return "";}
	var base64test = /[^A-Za-z0-9\+\/\=]/g;
	if (base64test.exec(base64)){
		return "";
	}
	do {
		enc1 = keyStr.indexOf(base64.charAt(i++));
		enc2 = keyStr.indexOf(base64.charAt(i++));
		enc3 = keyStr.indexOf(base64.charAt(i++));
		enc4 = keyStr.indexOf(base64.charAt(i++));
		chr1 = (enc1 << 2) | (enc2 >> 4);
		chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
		chr3 = ((enc3 & 3) << 6) | enc4;
		//output = output + String.fromCharCode(chr1);
		array.push(chr1);
		if (enc3 != 64) {
			//output+=String.fromCharCode(chr2);
			array.push(chr2);
		}
		if (enc4 != 64) {
			//output+=String.fromCharCode(chr3);
			array.push(chr3);
		}
		chr1 = chr2 = chr3 = "";
		enc1 = enc2 = enc3 = enc4 = "";
	} while (i < base64.length);
	var buffer=new Buffer(array)
	return buffer;
});
